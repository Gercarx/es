import socket, platform, os
SRV_ADDR = ""
SRV_PORT = 1234
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((SRV_ADDR, SRV_PORT))
s.listen(1)
connection, address = s.accept()
print("Client connected:", address)
#Il programma importa le librerie
Configura un server e una porta di ascolto
Accetta la  connessione in arrivo e ottiene il socket e l'indirizzo del client.
Stampa un messaggio indicando che un client si Ã¨ connesso.
``````````````````````````````````````````````````````````
while 1:
    try:
        data = connection.recv(1024)
    except:
        continue
# Entra in un ciclo while  infinito
 riceve dati dal client con una dimensione  di 1024 byte.
Se si verifica un errore durante la cattura dei dati , continua con la prossima istruzione  del loop.
`````````````````````````````````````````````````````````````````````
    if data.decode('utf-8') == '1':
        tosend = platform.platform() + " " + platform.machine()
        connection.sendall(tosend.encode())
    elif data.decode('utf-8') == '2':
        data = connection.recv(1024)
        try:
            filelist = os.listdir(data.decode('utf-8'))
            tosend = ",".join(filelist)
        except:
            tosend = "wrong path"
        connection.sendall(tosend.encode())
    elif data.decode('utf-8') == '0':
        connection.close()
        connection, address = s.accept()
#Se i dati ricevuti dal client sono '1', invia al client informazioni sulla piattaforma e sulla macchina usata 
Se i dati sono '2', ricevi ulteriori dati e invia al client la lista dei file  in quella directory.
Se i dati   invece sono '0', chiude la connessione attuale e accetta una nuova connessione in arrivo.
